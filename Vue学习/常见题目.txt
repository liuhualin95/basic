1、css引入方式有哪些
1）link
2）import
3）内联样式
4）写在body前的style标签里面
2、link和import差别
1）link无兼容性，import须ie5以上
2）link支持使用js操作dom改变样式，import不可以
3）link是xml标签还可以定义rel连接属性等，import是css提供的一种方式，只能用于加载css
4）link标签引入的css和页面同时加载，import将在页面下载完之后加载css
3、行内元素：span a img input select
块级元素： div p h1-h5 ul li
4、XML和HTML区别：
XML标签必须正确被嵌套，闭合，小写，有根元素
5、Doctype、严格模式与混杂模式
Doctype存在于文档第一行，告诉浏览器以何种标准解析文档
严格模式是指使用浏览器可支持的最高标准去解析文档
混杂模式是一种比较宽松的向后兼容的模式，兼容老式站点以防止其无法工作
Doctype书写不正确或不存在会导致页面以混杂模式出现
6、IE6 bug以及解决
1）float浮动引起的双边距问题，3像素问题 加_display: inline -3px
2）png24位的图片在ie6上有背景 换成png8
3）浏览器默认margin和padding不同 可以加一个*{margin: 0; padding: 0}
4）超链接访问顺序 LVHA (link visited hover active)
5）z-index问题 给父级添加position:relative
6）为什么没有办法定义1px左右的宽度容器
ie6默认行高造成的 使用overflow：hidden zoom：0.08 line-height：1px
7、常用css hack技巧
bgd: red\9  ie678识别
*bgd: blue  ie67识别
_bgd: white ie6识别
8、ie和dom事件流的区别：
1）ie事件流只支持冒泡，dom事件流先捕获后冒泡且文本节点会触发事件（IE不会）
2）参数不同：attachEvent()两个参数 addEventListener()三个参数
3）加不加on：attachEvent()第一个参数比addEventListener()第一个参数多个on
4）this指向不同，ie事件流是全局作用域指向window，dom事件流是元素作用域，指向元素
5）ie阻止冒泡window.event.cancelBubble=true    dom阻止冒泡e.stopPropogation()
   ie阻止默认事件window.event.returnValue=false dom阻止默认事件e.preventDefault()
   ie事件目标window.event.srcElement            dom事件目标e.target
9、索引：对数据库表中一列或多列的值进行排序的一种数据结构
可以快速查找数据库表中的特定信息
1）唯一索引：不允许其中任何两行具有相同索引值的索引
2）主键索引：定义主键后自动创建
3）聚集索引：物理顺序和逻辑顺序相同
提高系统性能，增加存储空间；插入和修改数据需要花费时间
MySQL支持哪些索引：B+索引 hash索引
查看索引的使用情况：Handler_read_*参数
哪些字段适合建立索引
1）主键、外键
2）where子句中的字段
3）选择性高的小字段
4）频繁进行数据操作的表，不要建立太多的索引，需要维护索引，影响性能和速度
10、缓冲池：缓存于内存空间中的数据库物理连接，可以被重复利用
降低数据压力，提高性能和速度
11、事务：作为单个逻辑工作单元执行的一系列操作，要么完全的执行，要么完全不执行
原子性：消除了系统处理操作子集的可能性
一致性：事务完成时数据保持一致状态
隔离性：并发事务所作的修改和其他任何并发事务所作的修改隔离
持久性：事务完成后对系统的影响是永久的
事务分三种：
隐式事务：每一条数据库操作语句都是，开始是隐式的，有显式的结束标记
显示事务：有显式的开始和结束的标记
自动事务：系统自动默认的，开始和结束不会标记
事务作为并发控制的基本单位，保证隔离性更一般，确保一致性
12、事务隔离的四种级别：
1）未提交读：出现脏读
2）提交读：防止脏读，不可重复读
3）重复读：防止不可重复读，幻读
4）序列化：串行化顺序执行
13、drop truncate delete
1）速度上一般而言是drop>truncate>delete
2）delete是DML，可以回滚，drop和truncate是DDL，不会回滚不会触发触发器
3）delete和truncate只删除数据，drop删除整个表（数据和结构，包括索引触发器和约束）
4）drop会将表所占用的空间全部释放，truncate会使表和索引占据的空间恢复到初始大小，
delete不会减少表和索引占用空间
14、MySQL有哪些存储引擎
存储引擎：myisam innodb memory merge
myisam和innodb区别：
1）innodb支持外键、事务、崩溃恢复，myisam不支持
2）innodb处理效率比myisam差一些，占用更多空间保存数据和索引
3）innodb表数据文件本身就是主索引，myisam索引文件和数据文件是分离的
4）innodb的辅助索引引用主键作为data域，myisam保存的是地址
15、MySQL存储引擎对索引结构的实现为什么要用B+树
1）文件很大，需要存在磁盘里面
2）尽量减少查找过程中磁盘I/O的存取次数
3）磁盘预读原理，预读整页的倍数，每个节点大小等于一个页，每个节点只要一次I/O就可以完全载入
16、DNS劫持与污染
1）DNS劫持是指用户访问一个地址时，DNS服务器的解析结果被篡改为一个错误的IP地址的行为
2）DNS污染是指用户访问一个地址，国内服务器（非DNS）监控到用户访问的已经被标记的地址时，
服务器伪装成DNS服务器向用户发回错误地址的行为
17、redis应用场景：数据实时性比较强，需要频繁插入更新和删除。
mongodb支持海量数据存储，丰富的数据表达、索引，不支持事务
redis特性：
1）响应速度快（数据内存存储，只要必要时才写入磁盘） 
2）特性丰富（支持多种数据结构，如string，list，hash，set，sorted set）
18、MySQL主从同步的作用：
1）可以当做一种备份机制，相当于热备份
2）可以用来做读写分离，负载均衡
19、进程是资源分配的最小单位，线程是CPU调度的最小单位
1）多进程数据共享复杂，需要用IPC（进程间通信），数据是分开的，同步简单；多线程数据共享简单，同步复杂
2）多进程占用内存多、cpu利用率低；多线程占用内存少、cpu利用率高
3）多进程创建销毁开销大，切换复杂；多线程开销小，切换简单
4）进程间不会相互影响；一个线程挂掉将导致整个进程挂掉
5）分布式多进程适用于多核、多机分布；多线程适应于多核分布式
20、几种进程间的通信方式
1）管道：无名管道（父子进程）和命名管道（可以无血缘关系）
2）信号：用于接受某种事件发生，除了用于进程间通信还能发送信号给进程本身
3）消息队列：消息的链表，客服了信息承载信息量少，管道只能承载无格式字节流及缓冲区大小受限等缺陷
4）共享内存：多个进程可以访问同一个共享内存空间
21、抽象类和接口的区别：
1）抽象类可以有默认的方法实现，接口不存在方法的实现
2）抽象类有构造器，接口没有构造器
3）子类使用extends继承抽象类，子类使用implements实现接口
4）抽象方法可以由public、protected等修饰，接口方法只能由public修饰
22、操作系统中分页和分段的区别
分页是物理单位，分段是逻辑的；分页大小是固定的，分段是不固定的；分页是一维的，分段是二维的
23、数据库表结构如何优化：
1）数据类型选择，减少IO读写量
数字类型尽量不要使用double，字符类型尽量不要用text
2）适当拆分，大部分访问某张表的时候不需要某个大字段，可以拆分到另外的独立表
3）适度冗余：比如被频繁引用且只能通过join两张大表的方式才能得到的独立小字段，只要确保数据一致性就好
4）尽量使用not null，null类型比较特殊，sql难优化